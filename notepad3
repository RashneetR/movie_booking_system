 email user.rb 

 paginate everywhere 


 <!--<%= #image_tag(@admin_movie.image_url(:thumb).to_s) %>-->
 movies _modal pop up partial


 mailer

user.rb

 # frozen_string_literal: true

class UserMailer < ApplicationMailer
  default from: 'rashneetforsampleapp@gmail.com'

  def welcome_email(user)
    puts "\n\n\n\n\n hi hi #{user} hi hi \n\n\n\n"
    puts "\n\n\n\n\n hi hi #{user.id} hi hi \n\n\n\n"
    @user = User.find_by(id: user.id)
    #@user = User.find_by(id: params[:user][:id])
    #@user = params[:user]
    mail(to: @user.email, subject: 'Welcome to BookMyShow')
  end

  def movie_update
    # @subscriptions = params[:subscription]
    @users = params[:user]
    @movie_name = params[:movie_name]
    @users.each do |user_id|
      @user = User.find(user_id)
      mail(to: @user.email, subject: 'Movie release!')
    end
  end

  def ticket_booked
    @ticket = params[:ticket]
    mail(to: @ticket.user.email, subject: 'Tickets Confirmed')
  end

  def sample_email
    puts 'Hello1 '
    @user = User.find(params[:user][:id])
    puts "\n\n\n\n\n #{@user}\n\n\n"
    mail(to: @user.email, subject: 'Sample Email')
    puts 'Hello3 '
  end
end


////////////////////////////////////////
class MovieObserver < Mongoid::Observer
  def before_destroy(admin_movie)
    return true if admin_movie.shows.blank? && admin_movie.reviews.blank?

    #admin_theatre.errors.add(:base, "Cannot delete theatre due to existing shows for the theatre")
    throw(:abort)
  end

  def after_destroy(admin_movie)
    @subscriptions = MovieInterest.where(movie_id: admin_movie.id)
    @subscriptions.each(&:destroy)
  end
end


class ShowObserver < Mongoid::Observer
  def before_destroy(admin_show)
    return true if admin_show.tickets.blank?

    #admin_theatre.errors.add(:base, "Cannot delete theatre due to existing shows for the theatre")
    throw(:abort)
  end
  


end



class TheatreObserver < Mongoid::Observer

  def before_destroy(admin_theatre)
    byebug
    return true if admin_theatre.shows.blank?

    admin_theatre.errors.add(:base, "Cannot delete theatre due to existing shows for the theatre")
    throw(:abort)
  end
end



===

sign_in @ser

sesison .clear

def cancel

end


def active_for_authentication?
     return true if super && self.active == "active"
     if super && self.active == "inactive"
      errors.add(:active,'Account is inactive. Please click on confirm account to activate')
    end

  end

function parth(ele) {
  //$(elem).find().next().find('input').val($(ele).val()*200);
  $(elem).closest('.rash').find('input.total_cost').val($(ele).val()*200);
}

function myFunction() {
    var x = document.getElementById("ticket_num_seats_bought");
    var y = document.getElementById("ticket_total_cost");
    var z = document.getElementById("ticket_temp");
    y.value = x.value * z.value;
  }


  <div>
          <%= f.label :contact %>
          <%= f.text_field :contact, class: 'form-control'%>
        </div>


        , readonly: true 
/////////////////////////////////////

embeds_many :contacts
  accepts_nested_attributes_for :contacts


  class Contact
  include Mongoid::Document

  embedded_in :user

  field :contact_no,type: String

  validates :contact_no, length: { is: 10 }, inclusion: { in: 0...9 }
end


<%= f.fields_for :contact do |ff| %>
         <div>
          <%= ff.label :contact_no %>
          <%= ff.text_field :contact_no, class: 'form-control'%>
        </div>
        <% end %>


<%= @admin_theatre.address %>